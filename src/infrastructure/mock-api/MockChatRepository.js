import { ChatRepository } from '../../domain/repositories/ChatRepository.js';
import { Message } from '../../domain/entities/Message.js';

/**
 * Implementa√ß√£o mock do ChatRepository
 * @class MockChatRepository
 * @extends {ChatRepository}
 */
export class MockChatRepository extends ChatRepository {
  constructor() {
    super();
    this.messages = [];
    this.mockResponses = [
      "Ol√°! üòä Eu sou o **XandAI**, seu assistente virtual. Como posso te ajudar hoje?",
      "Essa √© uma **excelente pergunta**! Vou fazer o meu melhor para te ajudar.",
      "Entendi seu ponto. Deixe-me pensar em uma solu√ß√£o para isso... ü§î",
      "√ìtima quest√£o! Aqui est√° o que eu penso sobre isso:\n\n* Primeiro, vamos analisar o problema\n* Depois, pensamos nas poss√≠veis solu√ß√µes\n* E por fim, implementamos a melhor abordagem",
      "Interessante! Essa √© uma √°rea que eu conhe√ßo bem. Vou te explicar:\n\n> \"A melhor forma de aprender √© praticando e experimentando.\"\n\nVamos come√ßar com alguns conceitos b√°sicos.",
      "Claro! Posso te ajudar com isso. Vamos come√ßar pelo **b√°sico**:\n\n1. Identificar o objetivo\n2. Planejar a abordagem\n3. Executar passo a passo\n4. Avaliar os resultados",
      "Perfeito! Essa √© uma das minhas **especialidades**. Aqui est√° um exemplo pr√°tico:\n\n```javascript\nfunction exemplo() {\n  console.log('Ol√°, mundo!');\n}\n```",
      "Boa pergunta! Vou te dar uma resposta **detalhada** sobre isso:\n\n### Pontos importantes:\n- Sempre considere o contexto\n- Pense nas implica√ß√µes\n- Teste suas hip√≥teses\n\n*Espero que isso ajude!* ‚ú®",
      "Entendi completamente. Aqui est√° uma **explica√ß√£o passo a passo**:\n\n---\n\n**Passo 1:** An√°lise inicial\n**Passo 2:** Desenvolvimento da solu√ß√£o\n**Passo 3:** Implementa√ß√£o\n**Passo 4:** Valida√ß√£o\n\n---\n\nCada etapa √© importante para o sucesso! üéØ",
      "Excelente! Vou te mostrar **diferentes formas** de abordar isso:\n\n| Abordagem | Vantagens | Desvantagens |\n|-----------|-----------|-------------|\n| M√©todo A  | R√°pido    | Menos preciso |\n| M√©todo B  | Preciso   | Mais lento |\n| M√©todo C  | Equilibrado | Complexo |\n\nQual voc√™ prefere? ü§ì"
    ];
  }

  /**
   * Simula o envio de uma mensagem e retorna uma resposta mock
   * @param {string} message - Mensagem do usu√°rio
   * @param {Function} onToken - Callback para streaming (opcional)
   * @returns {Promise<string>} - Resposta simulada do XandAI
   */
  async sendMessage(message, onToken = null) {
    // Seleciona uma resposta mock aleat√≥ria
    const randomIndex = Math.floor(Math.random() * this.mockResponses.length);
    let response = this.mockResponses[randomIndex];

    // Personaliza a resposta baseada na mensagem do usu√°rio
    response = this.personalizeResponse(message, response);

    // Se tem callback de streaming, simula token por token
    if (onToken) {
      await this.simulateStreaming(response, onToken);
    } else {
      // Simula delay de rede normal
      await this.simulateNetworkDelay();
    }

    return response;
  }

  /**
   * Simula streaming de resposta token por token
   * @param {string} fullResponse - Resposta completa
   * @param {Function} onToken - Callback para cada token
   */
  async simulateStreaming(fullResponse, onToken) {
    const words = fullResponse.split(' ');
    let currentResponse = '';
    
    for (let i = 0; i < words.length; i++) {
      const word = words[i];
      currentResponse += (i > 0 ? ' ' : '') + word;
      
      // Simula delay entre tokens
      await this.simulateNetworkDelay(50, 200);
      
      // Chama o callback com o token atual
      const isLast = i === words.length - 1;
      onToken(word + (i < words.length - 1 ? ' ' : ''), currentResponse, isLast);
    }
  }

  /**
   * Retorna o hist√≥rico de mensagens armazenadas
   * @returns {Promise<Message[]>} - Array de mensagens
   */
  async getMessageHistory() {
    await this.simulateNetworkDelay(100); // Delay menor para opera√ß√£o local
    return [...this.messages];
  }

  /**
   * Salva uma mensagem no hist√≥rico local
   * @param {Message} message - Mensagem a ser salva
   * @returns {Promise<void>}
   */
  async saveMessage(message) {
    await this.simulateNetworkDelay(50); // Delay muito pequeno para salvar
    this.messages.push(message);
  }

  /**
   * Limpa o hist√≥rico de mensagens
   * @returns {Promise<void>}
   */
  async clearHistory() {
    await this.simulateNetworkDelay(100);
    this.messages = [];
  }

  /**
   * Simula delay de rede
   * @param {number} minDelay - Delay m√≠nimo em ms
   * @param {number} maxDelay - Delay m√°ximo em ms
   * @returns {Promise<void>}
   */
  async simulateNetworkDelay(minDelay = 500, maxDelay = 2000) {
    const delay = Math.random() * (maxDelay - minDelay) + minDelay;
    return new Promise(resolve => setTimeout(resolve, delay));
  }

  /**
   * Personaliza a resposta baseada na mensagem do usu√°rio
   * @param {string} userMessage - Mensagem do usu√°rio
   * @param {string} baseResponse - Resposta base
   * @returns {string} - Resposta personalizada
   */
  personalizeResponse(userMessage, baseResponse) {
    const lowerMessage = userMessage.toLowerCase();

    // Respostas espec√≠ficas para certas palavras-chave
    if (lowerMessage.includes('oi') || lowerMessage.includes('ol√°') || lowerMessage.includes('ola')) {
      return "Ol√°! üëã Muito prazer, eu sou o **XandAI**!\n\nComo posso te ajudar hoje? Posso:\n\n* Responder perguntas\n* Ajudar com programa√ß√£o\n* Conversar sobre diversos assuntos\n* E muito mais!\n\n*Fique √† vontade para perguntar qualquer coisa!* ‚ú®";
    }

    if (lowerMessage.includes('nome') || lowerMessage.includes('quem √© voc√™')) {
      return "## Sobre mim ü§ñ\n\nEu sou o **XandAI**, seu assistente virtual inteligente!\n\n### O que posso fazer:\n- ‚úÖ Responder perguntas\n- ‚úÖ Ajudar com programa√ß√£o\n- ‚úÖ Explicar conceitos\n- ‚úÖ Conversar sobre diversos temas\n- ‚úÖ Dar sugest√µes e ideias\n\n*Fui criado para te ajudar da melhor forma poss√≠vel!* üòä";
    }

    if (lowerMessage.includes('obrigado') || lowerMessage.includes('obrigada')) {
      return "De nada! üòä **Fico muito feliz** em poder ajudar!\n\n*H√° mais alguma coisa que voc√™ gostaria de saber?*\n\n> \"Ajudar √© a minha especialidade!\"";
    }

    if (lowerMessage.includes('ajuda') || lowerMessage.includes('help')) {
      return "## Como posso te ajudar? üöÄ\n\nEstou aqui para te auxiliar! Aqui est√£o algumas **op√ß√µes**:\n\n### üí¨ Conversa√ß√£o\n- Tire d√∫vidas sobre qualquer assunto\n- Converse sobre seus interesses\n- Pe√ßa explica√ß√µes detalhadas\n\n### üíª Programa√ß√£o\n- Ajuda com c√≥digo\n- Explica√ß√£o de conceitos\n- Boas pr√°ticas\n- Debug e solu√ß√£o de problemas\n\n### üéØ Outras √°reas\n- Cria√ß√£o de conte√∫do\n- Brainstorming\n- An√°lise de problemas\n- Sugest√µes e ideias\n\n*S√≥ me falar o que voc√™ precisa!* ‚ú®";
    }

    if (lowerMessage.includes('programa√ß√£o') || lowerMessage.includes('c√≥digo')) {
      return "# Programa√ß√£o √© incr√≠vel! üíª\n\n**Posso te ajudar com:**\n\n## Linguagens\n- JavaScript, Python, Java, C#\n- HTML, CSS, SQL\n- E muitas outras!\n\n## Conceitos\n- Algoritmos e estruturas de dados\n- Paradigmas de programa√ß√£o\n- Arquitetura de software\n- Boas pr√°ticas\n\n## Frameworks & Tools\n- React, Node.js, Spring\n- Git, Docker, APIs\n- Bancos de dados\n\n### Exemplo r√°pido:\n```javascript\n// Fun√ß√£o simples em JavaScript\nfunction saudar(nome) {\n  return `Ol√°, ${nome}! üëã`;\n}\n\nconsole.log(saudar('Programador'));\n```\n\n*O que voc√™ gostaria de saber sobre programa√ß√£o?* ü§ì";
    }

    if (lowerMessage.includes('tchau') || lowerMessage.includes('at√© logo')) {
      return "## At√© logo! üëã\n\n**Foi um prazer** conversar com voc√™!\n\n> \"Sempre que precisar, estarei aqui esperando para ajudar.\"\n\n*Tenha um √≥timo dia!* ‚ú®üòä";
    }

    // Adiciona um toque pessoal √† resposta base
    const personalizedPrefixes = [
      "Que legal que voc√™ perguntou sobre isso! ",
      "Adorei sua pergunta! ",
      "√â sempre bom discutir sobre isso! ",
      "Que assunto interessante! ",
      ""
    ];

    const randomPrefix = personalizedPrefixes[Math.floor(Math.random() * personalizedPrefixes.length)];
    return randomPrefix + baseResponse;
  }
}
